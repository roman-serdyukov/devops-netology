1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа; опишите ход своих мыслей, если считаете что она могла бы быть другого типа.

сd является встроенной командой, так как смена текущей директории в рамках дочернего процесса не приведет ни к каким последствиям на уровне командной оболочки

2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других подобных некорректных вариантах использования pipe.

grep <some_string> <some_file> -c

3. Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

systemd

vagrant@vagrant:~$ ps --pid 1
    PID TTY          TIME CMD
      1 ?        00:00:00 systemd

4. Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала

tty
/dev/pts/0
ls /coolfolder 2> /dev/pts/1

Предварительно открыл еще одну сессию
tty
/dev/pts/1

5. Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

grep vagrant ps.txt > ps_vagrant.txt

Предварительно
ps aux > ps.txt

6. Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Получится.
Например:

echo 'hello' > /dev/tty6

наблюдать можно в tty6

7. Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит? 

bash 5>&1
создаст новый дескриптор и перенаправит его в stdout

echo netology > /proc/$$/fd/5
netology

echo отправил 'netolojy' в поток с декрипотом 5, который мы перенаправляли в stdout

8. Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty? Напоминаем: по умолчанию через pipe передается только stdout команды слева от | на stdin команды справа. Это можно сделать, поменяв стандартные потоки местами через промежуточный новый дескриптор, который вы научились создавать в предыдущем вопросе.

ll && ls -z 2>&1 > /proc/$$/fd/5 | cat > file.txt

ll выведет на экран содержимое текущего каталога
ls -z завершится с ошибкой, которая будет отправлена в file.txt
cat file.txt 
ls: invalid option -- 'z'
Try 'ls --help' for more information.

9. Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?

Описание окружения, в котором работает процесс. Аналогичный по содержанию вывод можно получить командой 'env'

10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.

/proc/<PID>/cmdline - Этот доступный только для чтения файл содержит полную командную строку для процесса, если только процесс не является зомби. В последнем случае в этом файле ничего нет: то есть чтение этого файла вернет 0 символов. Аргументы командной строки появляются в этом файле в виде набора строк, разделенных нулевыми байтами (' 0'), с последующим нулевым байтом после последней строки.

/proc/<PID>/exe - В Linux 2.2 и более поздних версиях этот файл представляет собой символическую ссылку, содержащую фактический путь к исполняемой команде. Эту символическую ссылку можно разыменовать обычным образом; попытка открыть его откроет исполняемый файл. Вы даже можете ввести / proc / [pid] / exe, чтобы запустить еще одну копию того же исполняемого файла, который запускается процессом [pid]. Если имя пути было отключено, символическая ссылка будет содержать строку «(удалено)», добавленную к исходному имени пути. В многопоточном процессе содержимое этой символической ссылки недоступно, если основной поток уже завершен (обычно путем вызова pthread_exit (3)).

11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

grep sse /proc/cpuinfo
sse4_2

12. При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:

vagrant@netology1:~$ ssh localhost 'tty'
not a tty

Почитайте, почему так происходит, и как изменить поведение.

При подключении по ssh сначала происходит вызов login и после успешной авторизации только запустится shell.
Можно запустить псевдотерминал принудительно командой
vagrant@vagrant:~$ ssh -t localhost 'tty'
/dev/pts/1
Connection to localhost closed.

13. Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.

Устанавливаем reptyr и screen
В /etc/sysctl.d/10-ptrace.conf устанавливаем kernel.yama.ptrace_scope = 0

tty
/dev/pts/4
sleep 120 &
[1] 26125
jobs
[1]+  Запущен          sleep 120 &
disown "%sleep"
screen
tty
/dev/pts/5
ps aux |grep sleep
roman      27088  0.0  0.0  16716   520 pts/4    S    17:03   0:00 sleep 300
roman      27135  0.0  0.0  17696  2736 pts/5    S+   17:03   0:00 grep --color=auto sleep
reptyr 27088
tty
/dev/pts/4
ps aux | grep 27088
roman      27088  0.0  0.0  16716   520 pts/4    S    17:03   0:00 sleep 300
roman      27180  2.2  0.0   2520   772 pts/5    S+   17:03   0:00 reptyr -T 27088
roman      27238  0.0  0.0  17696   732 pts/4    S+   17:04   0:00 grep --color=auto 27088

14. sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.

Команда tee считывает стандартный ввод (stdin), после чего записывает его в стандартный вывод (stdout) и одновременно копирует его в подготовленный файл или переменную.
Команда echo - это встроенная команда.
type tee
tee является /usr/bin/tee
tee может быть выполнена от sudo, т.к. не является встроееной командой.
