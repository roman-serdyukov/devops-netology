1. На лекции мы познакомились с node_exporter. В демонстрации его исполняемый файл запускался в background. Этого достаточно для демо, но не для настоящей production-системы, где процессы должны находиться под внешним управлением. Используя знания из лекции по systemd, создайте самостоятельно простой unit-файл для node_exporter:

- поместите его в автозагрузку,
- предусмотрите возможность добавления опций к запускаемому процессу через внешний файл (посмотрите, например, на systemctl cat cron),
- удостоверьтесь, что с помощью systemctl процесс корректно стартует, завершается, а после перезагрузки автоматически поднимается.

vagrant@vagrant:~$ sudo cat /etc/systemd/system/node_exporter.service 
[Unit]
Description=Node Exporter
[Service]
Type=simple
ExecStart=/usr/local/bin/node_exporter
[Install]
WantedBy=multi-user.target

vagrant@vagrant:~$ sudo systemctl enable node_exporter
vagrant@vagrant:~$ sudo systemctl start node_exporter
vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2021-11-30 11:48:41 UTC; 1s ago
   Main PID: 1281 (node_exporter)
      Tasks: 6 (limit: 4559)
     Memory: 3.0M
     CGroup: /system.slice/node_exporter.service
             └─1281 /usr/local/bin/node_exporter

Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.181Z caller=node_exporter.go:115 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.182Z caller=node_exporter.go:199 level>
Nov 30 11:48:41 vagrant node_exporter[1281]: ts=2021-11-30T11:48:41.182Z caller=tls_config.go:195 level=in>
lines 1-19/19 (END)

Предусмотрел возможность добавления пользовательских опций
agrant@vagrant:~$ systemctl cat node_exporter
# /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter

[Service]
Type=simple
EnvironmentFile=-/etc/default/node_exporter
ExecStart=/usr/local/bin/node_exporter $CUSTOM_OPTIONS

[Install]
WantedBy=multi-user.target

vagrant@vagrant:~$ cat /etc/default/node_exporter 
# This file has been deprecated. Please add custom options for node_exporter using
# $ systemctl edit node_exporter.service
# or
# $ systemctl edit --full node_exporter.service
CUSTOM_OPTIONS="--collector.cpu.info"

vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Thu 2021-12-02 11:14:05 UTC; 2s ago
   Main PID: 136656 (node_exporter)
      Tasks: 4 (limit: 4559)
     Memory: 2.3M
     CGroup: /system.slice/node_exporter.service
             └─136656 /usr/local/bin/node_exporter --collector.cpu.info

Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=thermal_zone
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=time
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=timex
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=udp_queues
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=uname
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=vmstat
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=xfs
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:115 level=info collector=zfs
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.773Z caller=node_exporter.go:199 level=info msg="Listening on" address=:9100
Dec 02 11:14:05 vagrant node_exporter[136656]: ts=2021-12-02T11:14:05.774Z caller=tls_config.go:195 level=info msg="TLS is disabled." http2=false

vagrant@vagrant:~$ curl http://localhost:9100/metrics | grep cpu_info
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0# HELP node_cpu_info CPU information from /proc/cpuinfo.
# TYPE node_cpu_info gauge
node_cpu_info{cachesize="6144 KB",core="0",cpu="0",family="6",microcode="",model="158",model_name="Intel(R) Core(TM) i5-7600 CPU @ 3.50GHz",package="0",stepping="9",vendor="GenuineIntel"} 1
node_cpu_info{cachesize="6144 KB",core="1",cpu="1",family="6",microcode="",model="158",model_name="Intel(R) Core(TM) i5-7600 CPU @ 3.50GHz",package="0",stepping="9",vendor="GenuineIntel"} 1
100 59628    0 59628    0     0  3639k      0 --:--:-- --:--:-- --:--:-- 3882k

Как видно, процесс стартовал с параметром, ктороый был определен в переменной $CUSTOM_OPTIONS из EnvironmentFile.

Удостоверился в работоспособности процесса

vagrant@vagrant:~$ sudo reboot
Connection to 127.0.0.1 closed by remote host.
Connection to 127.0.0.1 closed.
roman@DME-UBUNTU:/data/VMs/vagrant$ vagrant ssh
Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-80-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue 30 Nov 2021 12:24:26 PM UTC

  System load:  0.15              Processes:             151
  Usage of /:   3.2% of 61.31GB   Users logged in:       0
  Memory usage: 6%                IPv4 address for eth0: 10.0.2.15
  Swap usage:   0%


This system is built by the Bento project by Chef Software
More information can be found at https://github.com/chef/bento
Last login: Tue Nov 30 12:17:22 2021 from 10.0.2.2
vagrant@vagrant:~$ ps aux | grep node_exporter
root         647  0.0  0.2 715708 11184 ?        Ssl  12:24   0:00 /usr/local/bin/node_exporter
vagrant      933  0.0  0.0   9032   672 pts/0    S+   12:24   0:00 grep --color=auto node_exporter
vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2021-11-30 12:24:17 UTC; 1min 12s ago
   Main PID: 647 (node_exporter)
      Tasks: 6 (limit: 4559)
     Memory: 18.2M
     CGroup: /system.slice/node_exporter.service
             └─647 /usr/local/bin/node_exporter

Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=thermal_zone
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=time
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=timex
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=udp_queues
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=uname
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=vmstat
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=xfs
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=zfs
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:199 level=info msg="Listening on" address=:9100
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=tls_config.go:195 level=info msg="TLS is disabled." http2=false
vagrant@vagrant:~$ sudo systemctl stop node_exporter
vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: inactive (dead) since Tue 2021-11-30 12:25:38 UTC; 1s ago
    Process: 647 ExecStart=/usr/local/bin/node_exporter $CUSTOM_OPTIONS (code=killed, signal=TERM)
   Main PID: 647 (code=killed, signal=TERM)

Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=udp_queues
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=uname
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=vmstat
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=xfs
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:115 level=info collector=zfs
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=node_exporter.go:199 level=info msg="Listening on" address=:9100
Nov 30 12:24:17 vagrant node_exporter[647]: ts=2021-11-30T12:24:17.821Z caller=tls_config.go:195 level=info msg="TLS is disabled." http2=false
Nov 30 12:25:38 vagrant systemd[1]: Stopping Node Exporter...
Nov 30 12:25:38 vagrant systemd[1]: node_exporter.service: Succeeded.
Nov 30 12:25:38 vagrant systemd[1]: Stopped Node Exporter.
vagrant@vagrant:~$ sudo systemctl start node_exporter
vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2021-11-30 12:25:44 UTC; 5s ago
   Main PID: 970 (node_exporter)
      Tasks: 5 (limit: 4559)
     Memory: 2.6M
     CGroup: /system.slice/node_exporter.service
             └─970 /usr/local/bin/node_exporter

Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.967Z caller=node_exporter.go:115 level=info collector=thermal_zone
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.967Z caller=node_exporter.go:115 level=info collector=time
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.967Z caller=node_exporter.go:115 level=info collector=timex
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.967Z caller=node_exporter.go:115 level=info collector=udp_queues
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=node_exporter.go:115 level=info collector=uname
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=node_exporter.go:115 level=info collector=vmstat
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=node_exporter.go:115 level=info collector=xfs
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=node_exporter.go:115 level=info collector=zfs
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=node_exporter.go:199 level=info msg="Listening on" address=:9100
Nov 30 12:25:44 vagrant node_exporter[970]: ts=2021-11-30T12:25:44.968Z caller=tls_config.go:195 level=info msg="TLS is disabled." http2=false


2. Ознакомьтесь с опциями node_exporter и выводом /metrics по-умолчанию. Приведите несколько опций, которые вы бы выбрали для базового мониторинга хоста по CPU, памяти, диску и сети.

CPU
TYPE node_cpu_guest_seconds_total counter
TYPE node_cpu_seconds_total counter
TYPE process_cpu_seconds_total counter
Memory
TYPE node_memory_MemAvailable_bytes gauge
TYPE node_memory_MemFree_bytes gauge
TYPE node_memory_MemTotal_bytes gauge
TYPE node_memory_SwapFree_bytes gauge
TYPE node_memory_SwapTotal_bytes gauge
Disk
TYPE node_disk_io_now gauge
TYPE node_disk_io_time_seconds_total counter
TYPE node_disk_read_time_seconds_total counter
TYPE node_disk_reads_completed_total counter
TYPE node_disk_write_time_seconds_total counter
TYPE node_disk_writes_completed_total counter
Network
TYPE node_network_carrier gauge
TYPE node_network_info gauge
TYPE node_network_receive_bytes_total counter
TYPE node_network_receive_drop_total counter
TYPE node_network_receive_errs_total counter
TYPE node_network_receive_packets_total counter
TYPE node_network_speed_bytes gauge
TYPE node_network_transmit_bytes_total counter
TYPE node_network_transmit_drop_total counter
TYPE node_network_transmit_errs_total counter
TYPE node_network_transmit_packets_total counter
TYPE node_network_transmit_queue_length gauge
TYPE node_network_up gauge

3. Установите в свою виртуальную машину Netdata. Воспользуйтесь готовыми пакетами для установки (sudo apt install -y netdata). После успешной установки:

    в конфигурационном файле /etc/netdata/netdata.conf в секции [web] замените значение с localhost на bind to = 0.0.0.0,
    добавьте в Vagrantfile проброс порта Netdata на свой локальный компьютер и сделайте vagrant reload:

config.vm.network "forwarded_port", guest: 19999, host: 19999

После успешной перезагрузки в браузере на своем ПК (не в виртуальной машине) вы должны суметь зайти на localhost:19999. Ознакомьтесь с метриками, которые по умолчанию собираются Netdata и с комментариями, которые даны к этим метрикам.

Получилось без проблем (хоть и в /etc/netdata/netdata.conf не было секции [web])

4. Можно ли по выводу dmesg понять, осознает ли ОС, что загружена не на настоящем оборудовании, а на системе виртуализации?

Можно, ОС осознает.
......
[    0.000000] Hypervisor detected: KVM
.....
[    0.002205] CPU MTRRs all blank - virtualized system.
[    0.075615] Booting paravirtualized kernel on KVM
[    2.300021] systemd[1]: Detected virtualization oracle.
.....

5. Как настроен sysctl fs.nr_open на системе по-умолчанию? Узнайте, что означает этот параметр. Какой другой существующий лимит не позволит достичь такого числа (ulimit --help)?

fs.nr_open = 1048576  - это максимальное число открытых дескрипторов для ядра системы.

agrant@vagrant:~$ ulimit -Sn	# Мягкий лимит для пользователя. Может быть увеличен с шагом 1024.
1024
vagrant@vagrant:~$ ulimit -Hn	# Жесткий лимит для пользователя. Не может быть увеличен.
1048576

6. Запустите любой долгоживущий процесс (не ls, который отработает мгновенно, а, например, sleep 1h) в отдельном неймспейсе процессов; покажите, что ваш процесс работает под PID 1 через nsenter. Для простоты работайте в данном задании под root (sudo -i). Под обычным пользователем требуются дополнительные опции (--map-root-user) и т.д.

root@vagrant:~# ps aux | grep bin/bash
vagrant     1675  0.0  0.1   9968  4124 pts/1    Ss   07:54   0:00 /bin/bash
root        1823  0.0  0.0   8080   592 pts/1    S    08:15   0:00 unshare -f --pid --mount-proc /bin/bash
root        1824  0.0  0.1   9836  4084 pts/1    S+   08:15   0:00 /bin/bash
root        1866  0.0  0.0   9032   736 pts/0    S+   08:17   0:00 grep --color=auto bin/bash
root@vagrant:~# nsenter --target 1824 --pid --mount
root@vagrant:/# ps aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  0.0  0.1   9836  4084 pts/1    S+   08:15   0:00 /bin/bash
root           8  0.0  0.0   8076   520 pts/1    S    08:15   0:00 sleep 1000
root          21  0.0  0.1   9836  4088 pts/0    S    08:17   0:00 -bash
root          30  0.0  0.0  11492  3292 pts/0    R+   08:17   0:00 ps aux

7. Найдите информацию о том, что такое :(){ :|:& };:. Запустите эту команду в своей виртуальной машине Vagrant с Ubuntu 20.04 (это важно, поведение в других ОС не проверялось). Некоторое время все будет "плохо", после чего (минуты) – ОС должна стабилизироваться. Вызов dmesg расскажет, какой механизм помог автоматической стабилизации. Как настроен этот механизм по-умолчанию, и как изменить число процессов, которое можно создать в сессии? 

:(){ :|:& };: - создаёт функцию, которая запускает ещё два своих экземпляра, которые, в свою очередь снова запускают эту функцию и так до тех пор, пока этот процесс не займёт всю физическую память компьютера.

Полагаю, что данный механизм помог стабилизировать систему
[  121.052475] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-1.scope

ulimit -u
15199		# Было на виртуалке по-умолчанию

ulimit -u 20	# Например, можно установить
